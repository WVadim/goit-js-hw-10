{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('button[data-start]');\nconst dateTimePicker = document.getElementById('datetime-picker');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet timerInterval;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  dateTimePicker.disabled = true;\n  timerInterval = setInterval(updateTimer, 1000);\n});\n\nfunction updateTimer() {\n  const now = new Date();\n  const timeRemaining = userSelectedDate - now;\n\n  if (timeRemaining <= 0) {\n    clearInterval(timerInterval);\n    dateTimePicker.disabled = false;\n    iziToast.success({\n      title: 'Success',\n      message: 'The countdown has ended',\n    });\n    return;\n  }\n\n  const time = convertMs(timeRemaining);\n  daysValue.textContent = addLeadingZero(time.days);\n  hoursValue.textContent = addLeadingZero(time.hours);\n  minutesValue.textContent = addLeadingZero(time.minutes);\n  secondsValue.textContent = addLeadingZero(time.seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["startBtn","dateTimePicker","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","updateTimer","timeRemaining","time","convertMs","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"2GAKA,MAAMA,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACAC,EAEJP,EAAS,SAAW,GAEpB,MAAMQ,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,GAAoB,IAAI,MAC1BI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDV,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACH,EAEAW,EAAUV,EAAgBO,CAAO,EAEjCR,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBC,EAAe,SAAW,GAC1BM,EAAgB,YAAYK,EAAa,GAAI,CAC/C,CAAC,EAED,SAASA,GAAc,CAErB,MAAMC,EAAgBP,EADV,IAAI,KAGhB,GAAIO,GAAiB,EAAG,CACtB,cAAcN,CAAa,EAC3BN,EAAe,SAAW,GAC1BS,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,yBACf,CAAK,EACD,MACD,CAED,MAAMI,EAAOC,EAAUF,CAAa,EACpCX,EAAU,YAAcc,EAAeF,EAAK,IAAI,EAChDX,EAAW,YAAca,EAAeF,EAAK,KAAK,EAClDV,EAAa,YAAcY,EAAeF,EAAK,OAAO,EACtDT,EAAa,YAAcW,EAAeF,EAAK,OAAO,CACxD,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAeM,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}